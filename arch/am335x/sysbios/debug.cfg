var common = xdc.loadCapsule('common.cfg');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Main = xdc.useModule('xdc.runtime.Main');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Diags = xdc.useModule('xdc.runtime.Diags');


/* 
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
 */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
//Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

/*
* Uncomment this line to keep module names from being loaded on the target.
* The module name strings are placed in the .const section. Setting this
* parameter to false will save space in the .const section.  Error and
* Assert messages will contain an "unknown module" prefix instead
* of the actual module name.
Defaults.common$.namedModule = false;
*/
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
//Main.common$.diags_ASSERT = Diags.ALWAYS_OFF;
//Main.common$.diags_INTERNAL = Diags.ALWAYS_OFF;

BIOS.libType = BIOS.LibType_Instrumented;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

var instrumented = true;
if (instrumented) {
    var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
    var UIAErr = xdc.useModule('ti.uia.events.UIAErr');
    var UIAEvt = xdc.useModule('ti.uia.events.UIAEvt');
    var UIABenchmark = xdc.useModule('ti.uia.events.UIABenchmark');
    var UIAStatistic = xdc.useModule('ti.uia.events.UIAStatistic');
    LoggingSetup.sysbiosSwiLogging = false;
    LoggingSetup.sysbiosHwiLogging = false;
    LoggingSetup.sysbiosTaskLogging = false;
    LoggingSetup.sysbiosLoggerSize = 1048576;
    LoggingSetup.mainLoggerSize = 1048576;
    LoggingSetup.loadLoggerSize = 1048576;
    LoggingSetup.memorySectionName = "DDR3";
    LoggingSetup.loadTaskLogging = true;
    LoggingSetup.loadSwiLogging = true;
    LoggingSetup.loadHwiLogging = true;
    LoggingSetup.mainLogging = false;
    LoggingSetup.loggerType = LoggingSetup.LoggerType_STOPMODE;
    LoggingSetup.mainLoggingRuntimeControl = true;
} else {
    BIOS.libType = BIOS.LibType_Custom;
    //BIOS.libType = BIOS.LibType_NonInstrumented;
    //BIOS.libType = BIOS.LibType_Debug;
    BIOS.logsEnabled = false;
    BIOS.assertsEnabled = false;
}


