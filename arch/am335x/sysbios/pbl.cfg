var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Assert = xdc.useModule('xdc.runtime.Assert');
var Error = xdc.useModule('xdc.runtime.Error');

var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System'); 
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS'); 
var Hwi = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');
var GateMutex = xdc.useModule('ti.sysbios.gates.GateMutex');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache')

/* 
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
 */
 //Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
 Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

 /*
 * Keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section. Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */
//Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
//Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Main.common$.diags_ASSERT = Diags.ALWAYS_OFF;
Main.common$.diags_INTERNAL = Diags.ALWAYS_OFF;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 0;

/* 
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */ 
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */
 SysMin.flushAtExit = false;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 2048;
// use HeapTrack for the default heap
BIOS.heapTrackEnabled = true;

// place the entry point at the beginning (buggy)
var startOfDDR3 = 0x80000000;
var startOfSRAM = 0x402F0400;
Program.sectMap[".c_int00"] = new Program.SectionSpec(); 
Program.sectMap[".c_int00"].loadAddress = startOfSRAM; 
Program.sectMap[".c_int00"].runAddress = startOfSRAM;
 
/*
 * Tune the stack sizes.
 */
Program.stack = 1024; /* System stack size (used by ISRs and Swis) */
Task.defaultStackSize = 1024;
Task.idleTaskStackSize = 1024;


/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/*
 * Create and install logger for the whole system
 */
//Defaults.common$.logger = LoggerSys.create();
//Main.common$.diags_INFO = Diags.ALWAYS_ON;
//Load.common$.diags_USER4 = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
SysMin.outputFxn = "&Uart_write";
Error.raiseHook = null;
//Error.raiseHook = "&onSystemError";

BIOS.swiEnabled = false;
BIOS.taskEnabled = true;
BIOS.clockEnabled = false;

/* Set up MMU for peripheral addresses */
Mmu.enableMMU = true;

// Force peripheral section to be NON cacheable strongly-ordered memory
var attrs = {
        type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
        tex: 0,
        bufferable : false,                // bufferable
        cacheable  : false,                // cacheable
        shareable  : false,                // shareable
        noexecute  : true,                 // not executable
};

for(var addr = 0x44000000; addr < 0x57000000; addr += 0x00100000){
	Mmu.setFirstLevelDescMeta(addr,addr,attrs);
}

// turning off cacheing in the DDR3
var attrs2 = {
        type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
        tex: 0,
        bufferable : true,                // bufferable
        cacheable  : false,                // cacheable
        shareable  : false,                // shareable
        noexecute  : false,                 // not executable
};

for(var addr = 0x80000000; addr < 0x80000000 + 0x20000000; addr += 0x00100000){
	Mmu.setFirstLevelDescMeta(addr,addr,attrs2);
}

Task.checkStackFlag = false;

/*
 * Build a custom BIOS library. The custom library will be smaller than the
 * "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build. These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks. Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g","");
BIOS.customCCOpts += " -Os";
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/*
 * Disable runtime ModXyz_create(). This can only be used in static systems
 * where all objects are created in the configuration tool.
 */
BIOS.runtimeCreatesEnabled = true;

/* Create a Task Instance and use default Instance parameters */
Program.global.task0 = Task.create('&taskFxn');

/*
 * Set the error and abort functions to simple spin loops.
 */
System.abortFxn = System.abortSpin;
System.exitFxn = System.exitSpin;
Error.policyFxn = Error.policySpin;