// Configuration shared by all builds of SYS/BIOS.

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Assert = xdc.useModule('xdc.runtime.Assert');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');

var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');
var Hwi2 = xdc.useModule('ti.sysbios.hal.Hwi');

var Task = xdc.useModule('ti.sysbios.knl.Task');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache');

// var TimerProvider = xdc.useModule('ti.sysbios.timers.dmtimer.TimestampProvider');
var TimerProvider = xdc.useModule('ti.sysbios.family.arm.a8.TimestampProvider');

var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var HeapMultiBuf = xdc.useModule('ti.sysbios.heaps.HeapMultiBuf');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');


Task.addHookSet({
        switchFxn: "&onTaskSwitch",
});

System.extendedFormats += "%f";

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/* 
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */
SysMin.flushAtExit = true;

Program.linkTemplate = "linkcmd_er301.xdt"

HeapMem.primaryHeapBaseAddr = "&__kernel_heap_start__";
HeapMem.primaryHeapEndAddr = "&__kernel_heap_end__";
var heapMemParams = new HeapMem.Params();
heapMemParams.usePrimaryHeap = true;
Program.global.heap0 = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance = Program.global.heap0;

// use HeapTrack for the default heap
BIOS.heapTrackEnabled = false;

/* System stack size (used by ISRs and Swis) */
Program.stack = 4 * 1024;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 4 * 1024;

System.SupportProxy = SysMin;
SysMin.outputFxn = "&logWrite";
Error.raiseHook = "&onSystemError";

BIOS.swiEnabled = true;
BIOS.taskEnabled = true;

/* Set up MMU for peripheral addresses */
Mmu.enableMMU = true;

// Force peripheral section to be NON cacheable strongly-ordered memory
var attrs = {
        type: Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
        tex: 0,
        bufferable: false,                // bufferable
        cacheable: false,                // cacheable
        shareable: false,                // shareable
        noexecute: true,                 // not executable
};

for (var addr = 0x44000000; addr < 0x57000000; addr += 0x00100000) {
        Mmu.setFirstLevelDescMeta(addr, addr, attrs);
}

Task.checkStackFlag = false;
Hwi2.checkStackFlag = false;

Task.deleteTerminatedTasks = false;

Clock.swiPriority = 10;
// Dynamic mode seems to have more accurate timing
// BUT! it seriously reduces the amount of CPU available before clicks/pops and completely breaks ADC at low buffer sizes.
// Clock.tickMode = Clock.TickMode_DYNAMIC;

var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.windowInMs = 1000;
Load.taskEnabled = true;
//Clock.timerId = 5;
Clock.tickPeriod = 1000;
