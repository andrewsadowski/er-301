var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Assert = xdc.useModule('xdc.runtime.Assert');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
//var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
//var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Hwi = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');
var Hwi2 = xdc.useModule('ti.sysbios.hal.Hwi');

var Task = xdc.useModule('ti.sysbios.knl.Task');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Mmu = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache')
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var TimerProvider = xdc.useModule('ti.sysbios.timers.dmtimer.TimestampProvider');

var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var HeapMultiBuf = xdc.useModule('ti.sysbios.heaps.HeapMultiBuf');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//HeapMem.common$.gate = null;

//var Load = xdc.useModule('ti.sysbios.utils.Load');
//Load.updateInIdle = true;
//Load.windowInMs = 2000;

Task.addHookSet({
	switchFxn: "&onTaskSwitch",
});

System.extendedFormats += "%f";

//BIOS.libType = BIOS.LibType_Custom;
//BIOS.customCCOpts = BIOS.customCCOpts.replace(" -g ","");
//BIOS.customCCOpts = "--endian=little -mv7A8 --abi=eabi --neon --float_support=vfpv3 -q -ms --program_level_compile -o3 --opt_for_speed=3"
//BIOS.customCCOpts = "-mfpu=neon -O3"

/* 
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
 */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
//Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;


/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
//Main.common$.diags_ASSERT = Diags.ALWAYS_OFF;
//Main.common$.diags_INTERNAL = Diags.ALWAYS_OFF;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/* 
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */
SysMin.flushAtExit = true;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 505 * 1024 * 1024;//32000;
// use HeapTrack for the default heap
BIOS.heapTrackEnabled = false;

var heapSection = new Program.SectionSpec();
//heapSection.loadSegment = "DDR3";
heapSection.loadAddress = 0x80000000 + 0x20000000 - BIOS.heapSize;
heapSection.runAddress = heapSection.loadAddress
heapSection.type = "NOLOAD";
Program.sectMap[".noinit"] = heapSection;
BIOS.heapSection = ".noinit"

//Program.sectMap[".heap"] = new Program.SectionSpec();
//Program.sectMap[".heap"].loadSegment = "DDR3";
//Program.sectMap[".heap"].type = "NOLOAD"

// place the entry point at the beginning (buggy)
Program.sectMap[".c_int00"] = new Program.SectionSpec();
Program.sectMap[".c_int00"].loadAddress = 0x80000000;
Program.sectMap[".c_int00"].runAddress = 0x80000000;

//Program.sectionsTemplate = "../custom_linkcmd.xdt";



/* System stack size (used by ISRs and Swis) */
Program.stack = 16 * 1024;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 8 * 1024;

/*
 * Create and install logger for the whole system
 */
//Defaults.common$.logger = LoggerSys.create();
//Main.common$.diags_INFO = Diags.ALWAYS_ON;
//Load.common$.diags_USER4 = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
SysMin.outputFxn = "&logWrite";
Error.raiseHook = "&onSystemError";
//var SemihostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');


BIOS.swiEnabled = true;
BIOS.taskEnabled = true;

var socType = "am335x";

/* Load the EDMA3 package */
//var Edma3Drv = xdc.loadPackage('ti.sdo.edma3.drv');
//var Edma3RM = xdc.loadPackage('ti.sdo.edma3.rm');

//var csl = xdc.loadPackage('ti.csl')
//var cslSettings = xdc.useModule('ti.csl.Settings');
//cslSettings.deviceType = socType; 
//cslSettings.libProfile = "release";

/* Load the OSAL package */
//var Osal = xdc.loadPackage('ti.osal');
//Osal.Settings.osType = "tirtos";
//Osal.Settings.socType= socType; 

//var Usb = xdc.loadPackage('ti.drv.usb');     
//var usbSettings = xdc.useModule('ti.drv.usb.Settings');
//usbSettings.socType = socType; 
//usbSettings.libProfile = "release";

/* Load the i2c package */
//var I2C               = xdc.loadPackage('ti.drv.i2c');
//I2C.Settings.socType  = socType;

/* Load the uart package */
//var Uart              = xdc.loadPackage('ti.drv.uart');
//Uart.Settings.socType = "am335x";
//Uart.Settings.useDma = "false";

/* Set up MMU for peripheral addresses */
Mmu.enableMMU = true;

// Force peripheral section to be NON cacheable strongly-ordered memory
var attrs = {
	type: Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
	tex: 0,
	bufferable: false,                // bufferable
	cacheable: false,                // cacheable
	shareable: false,                // shareable
	noexecute: true,                 // not executable
};

for (var addr = 0x44000000; addr < 0x57000000; addr += 0x00100000) {
	Mmu.setFirstLevelDescMeta(addr, addr, attrs);
}

Task.checkStackFlag = false;
Hwi2.checkStackFlag = false;

/* UAI setup */
if (false) {
	var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
	var UIAErr = xdc.useModule('ti.uia.events.UIAErr');
	var UIAEvt = xdc.useModule('ti.uia.events.UIAEvt');
	var UIABenchmark = xdc.useModule('ti.uia.events.UIABenchmark');
	var UIAStatistic = xdc.useModule('ti.uia.events.UIAStatistic');
	BIOS.libType = BIOS.LibType_Instrumented;
	BIOS.logsEnabled = true;
	BIOS.assertsEnabled = true;
	LoggingSetup.sysbiosSwiLogging = false;
	LoggingSetup.sysbiosHwiLogging = false;
	LoggingSetup.sysbiosTaskLogging = false;
	LoggingSetup.sysbiosLoggerSize = 1048576;
	LoggingSetup.mainLoggerSize = 1048576;
	LoggingSetup.loadLoggerSize = 1048576;
	LoggingSetup.memorySectionName = "DDR3";
	LoggingSetup.loadTaskLogging = true;
	LoggingSetup.loadSwiLogging = true;
	LoggingSetup.loadHwiLogging = true;
	LoggingSetup.mainLogging = false;
	LoggingSetup.loggerType = LoggingSetup.LoggerType_STOPMODE;
	LoggingSetup.mainLoggingRuntimeControl = true;
} else {
	BIOS.libType = BIOS.LibType_Custom;
	//BIOS.libType = BIOS.LibType_NonInstrumented;
	//BIOS.libType = BIOS.LibType_Debug;
	BIOS.logsEnabled = false;
	BIOS.assertsEnabled = false;
	var Load = xdc.useModule('ti.sysbios.utils.Load');
	Load.windowInMs = 1000;
}

Task.deleteTerminatedTasks = false;

Clock.swiPriority = 10;
// Dynamic mode seems to have more accurate timing
// BUT! it seriously reduces the amount of CPU available before clicks/pops and completely breaks ADC at low buffer sizes.
// Clock.tickMode = Clock.TickMode_DYNAMIC;

Load.taskEnabled = true;
//Clock.timerId = 5;
Clock.tickPeriod = 1000;
